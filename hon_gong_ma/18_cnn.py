

# 합성곱 신셩망 정리

# 기존의 밀집층 -> 뉴런하나당 하나의 출력
# 합성곱 -> 뉴런 하나당 여러개의 출력

# 기존의 밀집층보다 가중치를 적게두어 여러개의 출력을 갖는다.
# 예를들어, 뉴런하나의 10개의 입력값이 있다면 기존의 밀집층은 10개의 가중치를 두어
# 하나의 출력을 하지만 합성곱은 3개(사용자지정)의 가중치를 두어 뉴런하나당 8개의 출력을 갖는다.

# 용어정리
# 합성곱의 뉴런의 개수 = 필터
# 가중치 = 커널(도장)
# 합성곱의 장점은 1차원이 아니라 2차원 입력에도 적용할 수 있다.
# 예를 들어 1개의 (4,4) 1개의 필터에 (3,3)커널을 사용해 (2,2)의 출력을 할 수 있다.
# 이때의 출력을 특성맵이라고 부른다.
# 다른 예로 (4,4) 3개의 필터에 (3,3) 커널을 사용해 (2,2) 3개의 출력을 할 수 있다.
# 이떄의 특성맵은 (2,2,3)의 3차원 배열

# 합성곱 층의 사용
from tensorflow import keras
# keras.layers.Conv2D(10, kernal_size=(3, 3), activation='relu')
# Conv2D -> 2차원 입력에 대해서 왼쪽에서 오른쪽으로 위에서 아래로 이동하는 합성곱을 제공
# 10 -> 필터의 개수

# 합성곱 층을 1개 이상 사용한 인공신경망을 합성곱 신경망이라고 한다.


# 입력과 출력이 동일한 크기를 갖게하려면?
# 예를들어 (4,4)입력을 통해 (4,4)출력을 만들려면?
# (6,6)으로 생각하면서 계산 빈공간은 반값(0)이 됨
# 이렇게 빈 값을 채우는 것을 패딩이라고 함
# 이렇게 입력과 출력을 동일하게 해주는 것을 세임패딩이라고 함.

# 패딩없는 경우를 밸리드 패딩

# keras.layers.Conv2D(10, kernal_size=(3,3), activation='relu', padding='same', strides='1')
# same padding 사용, strides는 몇칸씩 이동하면서 도장을 찍는가? 웬만하면 1


# 폴링
# 특성맵의 가로세로 크기를 줄이는 역할을 수행, 특성맵의 개수는 줄어들지 않음.
# 예를들어 (2,2,3)의 특성맵을 (1,1,3)으로 줄임.
# 풀링의 원리는 가중치의 곱이아닌 도장영역에서 가장큰값인 최대풀링과 평균값인 평균풀링을 활용
# 예를들어 도장안에서 가장큰 값만 남기고 나머지를 없앰으로써 크기를 줄임.

# maxpooling -> 최대값을 기준으로 줄임
# keras.layers.MaxPooling2D(2, strides=2, padding='valid')
# 크기를 2분의 1로 줄이고 두칸씩 이동하며 padding이 없는 valid padding을 활용.


# averagepooling -> 평균값을 기준으로 줄임.
# 매개변수는 위와 동일

# 흑백과 컬러의 차이
# 흑백은 2차원이지만 컬러는 3차원임
# 따라서 커널(도장)도 차원을 하나 늘려주면 됨.
# 입력과 같은 크기의 차원으로 늘려줘야함. 



